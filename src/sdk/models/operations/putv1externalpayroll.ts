/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An array of benefits for the employee. Depends on your company selections, benefits include 401k, health insurance and more.
 */
export class Benefits extends SpeakeasyBase {
    /**
     * The ID of the benefit.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "benefit_id" })
    benefitId?: number;

    /**
     * Company contribution amount towards the benefit
     */
    @SpeakeasyMetadata()
    @Expose({ name: "company_contribution_amount" })
    companyContributionAmount?: string;

    /**
     * Employee deduction amount towards the benefit
     */
    @SpeakeasyMetadata()
    @Expose({ name: "employee_deduction_amount" })
    employeeDeductionAmount?: string;
}

/**
 * The earning type for the compensation.
 */
export enum EarningType {
    CompanyPayType = "CompanyPayType",
    CompanyEarningType = "CompanyEarningType",
}

/**
 * An array of earnings for the employee. Depends on your company selections, earnings includes wages, hours, bonuses, tips, commission and more.
 */
export class Earnings extends SpeakeasyBase {
    /**
     * The amount of the earning.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: string;

    /**
     * The ID of the earning.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "earning_id" })
    earningId?: number;

    /**
     * The earning type for the compensation.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "earning_type" })
    earningType?: EarningType;

    /**
     * The hour of the compensation for the pay period.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hours" })
    hours?: string;
}

export class Taxes extends SpeakeasyBase {
    /**
     * The amount of the tax.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: string;

    /**
     * The ID of the tax.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tax_id" })
    taxId?: number;
}

/**
 * Submit wages, benefits, taxes for each employee
 */
export class ExternalPayrollItems extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Benefits })
    @Expose({ name: "benefits" })
    @Type(() => Benefits)
    benefits?: Benefits[];

    @SpeakeasyMetadata({ elemType: Earnings })
    @Expose({ name: "earnings" })
    @Type(() => Earnings)
    earnings?: Earnings[];

    /**
     * The UUID of the employee.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "employee_uuid" })
    employeeUuid?: string;

    /**
     * An array of taxes for the employee. Depends on your company selections, taxes include federal income tax, social security, medicare, and more.
     */
    @SpeakeasyMetadata({ elemType: Taxes })
    @Expose({ name: "taxes" })
    @Type(() => Taxes)
    taxes?: Taxes[];
}

export class PutV1ExternalPayrollRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: ExternalPayrollItems })
    @Expose({ name: "external_payroll_items" })
    @Type(() => ExternalPayrollItems)
    externalPayrollItems?: ExternalPayrollItems[];

    /**
     * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "replace_fields" })
    replaceFields?: boolean;
}

export class PutV1ExternalPayrollRequest extends SpeakeasyBase {
    /**
     * The UUID of the company
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=company_uuid" })
    companyUuid: string;

    /**
     * The UUID of the external payroll
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=external_payroll_id" })
    externalPayrollId: string;

    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: PutV1ExternalPayrollRequestBody;
}

export class PutV1ExternalPayrollResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Example response
     */
    @SpeakeasyMetadata()
    externalPayroll?: shared.ExternalPayroll;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Unprocessable Entity
     *
     * @remarks
     *
     * This may happen when the body of your request contains errors such as `invalid_attribute_value`, or the request fails due to an `invalid_operation`. See the [Errors Categories](https://docs.gusto.com/embedded-payroll/docs/error-categories) guide for more details.
     *
     */
    @SpeakeasyMetadata()
    unprocessableEntityErrorObject?: shared.UnprocessableEntityErrorObject;
}
