/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class Requirements extends SpeakeasyBase {
    /**
     * An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "key" })
    key?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class RequirementSets extends SpeakeasyBase {
    /**
     * An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "effective_from" })
    effectiveFrom?: string;

    /**
     * An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "key" })
    key?: string;

    @SpeakeasyMetadata({ elemType: Requirements })
    @Expose({ name: "requirements" })
    @Type(() => Requirements)
    requirements?: Requirements[];

    /**
     * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state?: string;
}

export class PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: RequirementSets })
    @Expose({ name: "requirement_sets" })
    @Type(() => RequirementSets)
    requirementSets?: RequirementSets[];
}

export class PutV1CompaniesCompanyUuidTaxRequirementsStateRequest extends SpeakeasyBase {
    /**
     * The UUID of the company
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=company_uuid" })
    companyUuid: string;

    /**
     * 2-letter US state abbreviation
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=state" })
    state: string;

    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBody;
}

export class PutV1CompaniesCompanyUuidTaxRequirementsStateResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * Unprocessable Entity
     *
     * @remarks
     *
     * This may happen when the body of your request contains errors such as `invalid_attribute_value`, or the request fails due to an `invalid_operation`. See the [Errors Categories](https://docs.gusto.com/embedded-payroll/docs/error-categories) guide for more details.
     *
     */
    @SpeakeasyMetadata()
    unprocessableEntityErrorObject?: shared.UnprocessableEntityErrorObject;
}
