/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export enum OffCycleReason {
    Bonus = "Bonus",
    Correction = "Correction",
    DismissedEmployee = "Dismissed employee",
}

/**
 * The payment schedule tax rate the payroll is based on
 */
export enum WithholdingPayPeriod {
    EveryWeek = "Every week",
    EveryOtherWeek = "Every other week",
    TwicePerMonth = "Twice per month",
    Monthly = "Monthly",
    Quarterly = "Quarterly",
    Semiannually = "Semiannually",
    Annually = "Annually",
}

export class PostV1CompaniesCompanyIdPayrollsRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "check_date" })
    checkDate?: string;

    /**
     * A list of employee uuids to include on the payroll.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "employee_uuids" })
    employeeUuids?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "end_date" })
    endDate: string;

    /**
     * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fixed_withholding_rate" })
    fixedWithholdingRate?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "off_cycle" })
    offCycle: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "off_cycle_reason" })
    offCycleReason: OffCycleReason;

    /**
     * Block regular deductions and contributions for this payroll.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "skip_regular_deductions" })
    skipRegularDeductions?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "start_date" })
    startDate: string;

    /**
     * The payment schedule tax rate the payroll is based on
     */
    @SpeakeasyMetadata()
    @Expose({ name: "withholding_pay_period" })
    withholdingPayPeriod?: WithholdingPayPeriod;
}

export class PostV1CompaniesCompanyIdPayrollsRequest extends SpeakeasyBase {
    /**
     * The UUID of the company
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=company_id" })
    companyId: string;

    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: PostV1CompaniesCompanyIdPayrollsRequestBody;
}

export class PostV1CompaniesCompanyIdPayrollsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Example response
     */
    @SpeakeasyMetadata()
    payroll?: shared.Payroll;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Unprocessable Entity
     *
     * @remarks
     *
     * This may happen when the body of your request contains errors such as `invalid_attribute_value`, or the request fails due to an `invalid_operation`. See the [Errors Categories](https://docs.gusto.com/embedded-payroll/docs/error-categories) guide for more details.
     *
     */
    @SpeakeasyMetadata()
    unprocessableEntityErrorObject?: shared.UnprocessableEntityErrorObject;
}
