/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class EmployeeForms {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;

    constructor(
        defaultClient: AxiosInstance,
        securityClient: AxiosInstance,
        serverURL: string,
        language: string,
        sdkVersion: string,
        genVersion: string
    ) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }

    /**
     * Get an employee form
     *
     * @remarks
     * Get an employee form
     */
    async getV1EmployeeForm(
        req: operations.GetV1EmployeeFormRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetV1EmployeeFormResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV1EmployeeFormRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/v1/employees/{employee_id}/forms/{form_id}",
            req
        );

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetV1EmployeeFormResponse = new operations.GetV1EmployeeFormResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.form = utils.objectToClass(httpRes?.data, shared.Form);
                }
                break;
            case httpRes?.status == 404:
                break;
        }

        return res;
    }

    /**
     * Get the employee form pdf
     *
     * @remarks
     * Get the link to the form PDF
     */
    async getV1EmployeeFormPdf(
        req: operations.GetV1EmployeeFormPdfRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetV1EmployeeFormPdfResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV1EmployeeFormPdfRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/v1/employees/{employee_id}/forms/{form_id}/pdf",
            req
        );

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetV1EmployeeFormPdfResponse =
            new operations.GetV1EmployeeFormPdfResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.formPdf = utils.objectToClass(httpRes?.data, shared.FormPdf);
                }
                break;
            case httpRes?.status == 404:
                break;
        }

        return res;
    }

    /**
     * Get all employee forms
     *
     * @remarks
     * Get a list of all employee's forms
     */
    async getV1EmployeeForms(
        req: operations.GetV1EmployeeFormsRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetV1EmployeeFormsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV1EmployeeFormsRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(baseURL, "/v1/employees/{employee_id}/forms", req);

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetV1EmployeeFormsResponse =
            new operations.GetV1EmployeeFormsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.forms = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.forms = utils.objectToClass(httpRes?.data, shared.Form, resFieldDepth);
                }
                break;
            case httpRes?.status == 404:
                break;
        }

        return res;
    }

    /**
     * Generate a W2 form [SANDBOX]
     *
     * @remarks
     * Generates a W2 document for testing purposes.
     *
     * > ðŸ“˜
     * >
     * > This endpoint can only be used in the Sandbox environments.
     *
     * `scope: employees:write`
     *
     */
    async postV1SandboxGenerateW2(
        req: operations.PostV1SandboxGenerateW2RequestBody,
        config?: AxiosRequestConfig
    ): Promise<operations.PostV1SandboxGenerateW2Response> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PostV1SandboxGenerateW2RequestBody(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = baseURL.replace(/\/$/, "") + "/v1/sandbox/generate_w2";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PostV1SandboxGenerateW2Response =
            new operations.PostV1SandboxGenerateW2Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.form = utils.objectToClass(
                        httpRes?.data,
                        operations.PostV1SandboxGenerateW2Form
                    );
                }
                break;
            case httpRes?.status == 404:
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.unprocessableEntityErrorObject = utils.objectToClass(
                        httpRes?.data,
                        shared.UnprocessableEntityErrorObject
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Sign an employee form
     *
     * @remarks
     * Sign a company form
     */
    async putV1EmployeeFormSign(
        req: operations.PutV1EmployeeFormSignRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.PutV1EmployeeFormSignResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutV1EmployeeFormSignRequest(req);
        }

        const baseURL: string = this._serverURL;
        const url: string = utils.generateURL(
            baseURL,
            "/v1/employees/{employee_id}/forms/{form_id}/sign",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this._securityClient || this._defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this._language} ${this._sdkVersion} ${this._genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutV1EmployeeFormSignResponse =
            new operations.PutV1EmployeeFormSignResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.form = utils.objectToClass(httpRes?.data, shared.Form);
                }
                break;
            case httpRes?.status == 404:
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.unprocessableEntityErrorObject = utils.objectToClass(
                        httpRes?.data,
                        shared.UnprocessableEntityErrorObject
                    );
                }
                break;
        }

        return res;
    }
}
